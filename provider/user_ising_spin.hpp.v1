#ifndef user_ising_spin_hpp
#define user_ising_spin_hpp

#include <tbb/parallel_for.h>
#include "puzzler/puzzles/ising_spin.hpp"

using namespace tbb;

class IsingSpinProvider : public puzzler::IsingSpinPuzzle
{
public:
	IsingSpinProvider() {}

	virtual void Execute(
		puzzler::ILog *log,
		const puzzler::IsingSpinInput *pInput,
		puzzler::IsingSpinOutput *pOutput
	) const override {
		int n=pInput->n;

		//std::vector<int> current(n*n), next(n*n);

		std::vector<double> sums(pInput->maxTime * pInput->repeats, 0.0);
		std::vector<double> sumSquares(pInput->maxTime * pInput->repeats, 0.0);

		log->LogInfo("Starting steps.");

		std::mt19937 rng(pInput->seed); // Gives the same sequence on all platforms
		std::vector<uint32_t> seeds(pInput->repeats);
		for (uint32_t &seed: seeds)
			seed = rng();
		
		auto kernel_xy = [&](unsigned i, uint32_t *seeds, const puzzler::IsingSpinInput *pInput, double *sums, double *sumSquares)
		{
			std::vector<int> current(n*n), next(n*n);
			uint32_t seed = seeds[i];

			//log->LogVerbose("  Repeat %u", i);

			//size_t idx = i * n * n;
			init(pInput, seed, &current[0]);

			for(unsigned t=0; t<pInput->maxTime; t++){
				//log->LogDebug("    Step %u", t);

				// Dump the state of spins on high log levels
				//dump(Log_Debug, pInput, &current[0], log);

				step(pInput, seed, &current[0], &next[0]);
				std::swap(current, next);

				// Track the statistics
				double countPositive=count(pInput, &current[0]);
				sums[i + t * pInput->repeats] = countPositive;
				sumSquares[i + t * pInput->repeats] = countPositive*countPositive;
			}

		};
		for(unsigned i = 0; i < pInput->repeats; i++)
		{
			kernel_xy(i, &seeds[0], pInput, &sums[0], &sumSquares[0]);
		// tbb::parallel_for(0u, pInput->repeats, [=, &seeds, &log, &sums, &sumSquares](unsigned i){
		/*	std::vector<int> current(n*n), next(n*n);
			uint32_t seed = seeds[i];

			//log->LogVerbose("  Repeat %u", i);

			//size_t idx = i * n * n;
			init(pInput, seed, &current[0]);

			for(unsigned t=0; t<pInput->maxTime; t++){
				//log->LogDebug("    Step %u", t);

				// Dump the state of spins on high log levels
				//dump(Log_Debug, pInput, &current[0], log);

				step(pInput, seed, &current[0], &next[0]);
				std::swap(current, next);

				// Track the statistics
				double countPositive=count(pInput, &current[0]);
				sums[i + t * pInput->repeats] = countPositive;
				sumSquares[i + t * pInput->repeats] = countPositive*countPositive;
			}*/
		// });
		}
		log->LogInfo("Calculating final statistics");

		pOutput->means.resize(pInput->maxTime);
		pOutput->stddevs.resize(pInput->maxTime);
		//for(unsigned i=0; i<pInput->maxTime; i++){
		parallel_for(0u, pInput->maxTime, [&](unsigned i){
			double sum = 0.f, sumSquare = 0.f;
			double *pSums = &sums[i * pInput->repeats];
			double *pSumSquares = &sumSquares[i * pInput->repeats];
			for (unsigned i = 0; i != pInput->repeats; i++) {
				sum += *pSums++;
				sumSquare += *pSumSquares++;
			}
			pOutput->means[i] = sum / pInput->maxTime;
			pOutput->stddevs[i] = sqrt( sumSquare/pInput->maxTime - pOutput->means[i]*pOutput->means[i] );
			log->LogVerbose("  time %u : mean=%8.6f, stddev=%8.4f", i, pOutput->means[i], pOutput->stddevs[i]);
		});

		log->LogInfo("Finished");
	}

private:
	// This has some interesting and maybe useful properties...
	// The recurrence equation is:
	//   x_{i+1} = x_i * 1664525 + 1013904223 mod 2^32
	uint32_t lcg(uint32_t x) const
	{
		return x*1664525+1013904223;
	}

	void init(
		const IsingSpinInput *pInput,
		uint32_t &seed,
		int *out
	 ) const {
		unsigned n=pInput->n;

		for(unsigned x=0; x<n; x++){
			for(unsigned y=0; y<n; y++){
				out[y*n+x] = (seed < 0x80001000ul) ? +1 : -1;
				seed = lcg(seed);
			}
		}
	}

	int count(
		const IsingSpinInput *pInput,
		const int *in
	 ) const {
		unsigned n=pInput->n;

		return std::accumulate(in, in+n*n, 0);
	}

	void step(
		const IsingSpinInput *pInput,
		uint32_t &seed,
		const int *in,
		int *out
	 ) const {
		unsigned n=pInput->n;
		uint32_t s = seed;

		for(unsigned x=0; x<n; x++){
			for(unsigned y=0; y<n; y++){
				int W = x==0 ?    in[y*n+n-1]   : in[y*n+x-1];
				int E = x==n-1 ?  in[y*n+0]     : in[y*n+x+1];
				int N = y==0 ?    in[(n-1)*n+x] : in[(y-1)*n+x];
				int S = y==n-1 ?  in[0*n+x]     : in[(y+1)*n+x];
				int nhood=W+E+N+S;

				int C = in[y*n+x];

				unsigned index=(nhood+4)/2 + 5*(C+1)/2;
				float prob=pInput->probs[index];

				out[y*n+x] = s < prob ? -C : C;
				s = lcg(s);
			}
		}
		seed = s;
	}
};

#endif
